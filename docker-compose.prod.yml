version: '3.8'

services:
  client:
    container_name: client_container
    build:
      context: ./client
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=production
    environment:
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL:-http://localhost:4000}
    ports:
      - "${CLIENT_PORT:-3000}:3000"
    networks:
      - app-network
    depends_on:
      - api
    restart: unless-stopped

  api:
    container_name: api_container
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
      - PORT=${PORT:-4000}
      # Update DATABASE_URL to use the correct host and port
      - DATABASE_URL=postgresql://postgres:postgres@host.docker.internal:5432/news_api?schema=public
    ports:
      - "${API_PORT:-4000}:4000"
    volumes:
      - ./server/prisma:/app/prisma 
    networks:
      - app-network
      - postgres-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  postgres:
    container_name: postgres_container
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=news_api
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - postgres-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_DEFAULT_EMAIL:-pgadmin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PG_ADMIN_PORT:-5050}:80"
    networks:
      - postgres-network
    depends_on:
      - postgres
    restart: unless-stopped

networks:
  app-network:
    driver: bridge
  postgres-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
