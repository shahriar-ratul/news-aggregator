# Build stage
FROM node:18-alpine as builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY pnpm-lock.yaml ./

# Install dependencies
RUN npm install -g pnpm
RUN pnpm install

# Copy source code and config files
COPY . .
COPY tsconfig.json ./

# Generate Prisma client
ARG DATABASE_URL
ENV DATABASE_URL=${DATABASE_URL}
RUN npx prisma generate

# Build the application
RUN pnpm run build

# Production stage
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY pnpm-lock.yaml ./
COPY tsconfig.json ./  

# Install production dependencies only
RUN npm install -g pnpm
RUN pnpm install --prod

# Copy built application and necessary files
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules/.pnpm/@prisma+client* ./node_modules/.pnpm/@prisma+client
COPY --from=builder /app/node_modules/@prisma ./node_modules/@prisma
COPY prisma ./prisma
COPY wait-for-it.sh ./wait-for-it.sh
RUN chmod +x /app/wait-for-it.sh

# Install prisma as a production dependency
RUN pnpm add prisma

# Set environment variables
ARG DATABASE_URL
ENV DATABASE_URL=${DATABASE_URL}

# Run migrations and start the application
CMD ["/app/wait-for-it.sh", "postgres", "sh", "-c", "npx prisma migrate deploy && node dist/main"]
